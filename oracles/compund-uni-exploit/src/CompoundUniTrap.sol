// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {IERC20} from "forge-std/interfaces/IERC20.sol";
import {Test, console} from "forge-std/Test.sol";

interface IUniswapAnchoredView {
    function getUnderlyingPrice(address cToken) external view returns (uint256);
}

interface AggregatorV3Interface {
  function decimals() external view returns (uint8);

  function description() external view returns (string memory);

  function version() external view returns (uint256);

  function getRoundData(
    uint80 _roundId
  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);

  function latestRoundData()
    external
    view
    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);
}

contract CompoundUniTrap {
    struct PriceDataPoint {
        uint256 chainlinkPrice;
        uint256 uniswapPrice;
    }

    AggregatorV3Interface public dataFeed = AggregatorV3Interface(0x553303d460EE0afB37EdFf9bE42922D8FF63220e);
    IUniswapAnchoredView public uniswapView = IUniswapAnchoredView(0x50ce56A3239671Ab62f185704Caedf626352741e);
    uint256 public deviationThreshold = 14;

    function getPricefromChainlink() public view returns (int) {
        // prettier-ignore
        (
            /* uint80 roundID */,
            int answer,
            /*uint startedAt*/,
            /*uint timeStamp*/,
            /*uint80 answeredInRound*/
        ) = dataFeed.latestRoundData();
        return answer;
    }


    function collect() public view returns (PriceDataPoint memory) {
        int256 chainlinkPrice = getPricefromChainlink();
        uint256 adjustedChainlinkPrice = uint256(chainlinkPrice) * 10 ** 10;

        address tokenAddress = 0x35A18000230DA775CAc24873d00Ff85BccdeD550;
        uint256 uniswapPrice = uniswapView.getUnderlyingPrice(tokenAddress);

        console.log("Price from chainlink: ", adjustedChainlinkPrice);
        console.log("Price from uniswap: ", uniswapPrice);

        PriceDataPoint memory newPoint = PriceDataPoint({
            chainlinkPrice: adjustedChainlinkPrice,
            uniswapPrice: uniswapPrice
        });

        return newPoint;
    }


    function isValid(PriceDataPoint[] calldata dataPoints) public view returns (bool) {
        PriceDataPoint memory currentPrice = dataPoints[0];
        uint256 chainlinkPrice = currentPrice.chainlinkPrice;
        uint256 uniswapPrice = currentPrice.uniswapPrice;

        // Calculate the price difference
        uint256 priceDiff = (chainlinkPrice > uniswapPrice) ? chainlinkPrice - uniswapPrice : uniswapPrice - chainlinkPrice;

        console.log("Difference is: ",priceDiff);

        // Calculate the percentage difference
        uint256 priceDeviation = (priceDiff * 100) / chainlinkPrice;

        console.log("Deviation is: ",priceDeviation);
        // Check if the deviation exceeds the threshold
        
        if (priceDeviation > deviationThreshold) {
            return false;
        }

        return true;
}

}